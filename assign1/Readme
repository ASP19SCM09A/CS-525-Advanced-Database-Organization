--------Storage Manager CS - 525 Assignment No.1-------------
-Akash Gupta      - A20378676
-Tanmay Pradhan   - A20376280
-Snehita Kolapkar - A20389075

----------------------------------------------------

Running Instructions :

Step 1-  $ make 
Step 2-  $ ./test_assign1


To run additional test cases:

Step 1-  $ make test_assign2
Step 2-  $ ./test_assign2

------------------------------------------------------

About Test Cases:

We have added two functions naming EXTRA_TEST_CASES() and additionalPageTesting() in the file test_assign1_2.c which contain the extra test cases for the methods that were not tested in the default test case file, and the functions that are tested in the new test cases are :
readBlock()
readFirstBlock() 
readCurrentBlock()
readPreviousBlock()
readNextBlock()
readLastBlock()
writeBlock ()
writeCurrentBlock()
appendEmptyBlock()
ensureCapacity ()


-------------------------------------------------------

WHEN THE FILE IS OPENED, THE CURRENT PAGE POSITION IS THE FIRST PAGE IN THE FILE i.e. CURRENT PAGE POSITION = 0. AND THE TOTAL NUMBER OF PAGES DEPENDS UPON THE FILE ZISE.

Example: If the total number of pages are 1 then the current page position is 0.

--------------------------------------------------------

Function Description :

1. Fucntions to manipulate page file(Create,Open,Close,Destroy)

a) createPageFile():
      - Creates a new page file of 1 page(PAGE_SIZE) and fills it with '\0' bytes.
      - In this function we are using fopen() function to create the file.
      - The file is opened in the write mode so that we can fill it with '\0' bytes.

b) openPageFile():
      - Checks if the input file is present.
      - If file is present then opens the existing file or else throws an error RC_FILE_NOT_FOUND.
      - We are calculating the total number of pages by pointing the file pointer to end and then dividing it by the page size. 
      - After that we are updating the file handle with file name, total number of pages and current page position.
      
c) closePageFile():
      - Closes the already opened page file.
      - Returns RC_OK if file closes successfully else returns RC_FILE_NOT_FOUND.

d) destroyPageFile():
      - Destroys already created page file.
      - We are using remove function to destroy the file.
      - Returns RC_OK if file destroyed successfully else returns RC_FILE_NOT_FOUND. 

------------------------------------------------------------------------------------
2. Read functions :

a) readBlock():
      - Checks if the total number of pages are not greater than the page number(pageNum) from where to read.
      - If it is greater then throws an error.
      - Else we will set the pointer position to the page which we have to read.
      - then we read the block.
      - And then we set the current page position to the page number that we read.

b) getBlockPos():
      - Returning the current page position in the page file by using the data structure object fHandle.

c) readFirstBlock():
      - Checks if the data structure fHandle contains the values or not.
      - If it does then checks if the total number of pages are greater than 0.
      - If, then read the first block of the file.
      - And set the current page position to first block i.e. 0.

d) readPreviousBlock():
      - Checks if the data structure fHandle contains the values or not.
      - If it does then setting the pointer position to the previous page position.
      - If previous page position is out of boundry then throws an error.
      - Else reading the previous block of the file.
      - And setting the current page position to the previous block.

e) readCurrentBlock():
      - Checks if the data structure fHandle contains the values or not.
      - If it does then getting the current page position by calling the getBlockPos() function.
      - And then reading the current page of the file.
      - After that setting the current page position the the current block.

f) readNextBlock():
      - Checks if the data structure fHandle contains the values or not.
      - If it does then setting the pointer position to the next page position.
      - If the next block is not out of boundry.
      - then, reading the next block of the file.
      - And setting the current page position to the next block.

g) readLastBlock():
      - Checks if the data structure fHandle contains the values or not.
      - If it does then setting the pointer position to the last page position.
      - Reading the last block of the file.
      - And setting the current page position to the last block.

-------------------------------------------------------------------------------------------------------------

3. Write Functions

a) writeBlock():
      - Checks if the entered file already exist else throws an error.
      - If the file exist it writes data in the page number entered.

b)writeCurrentBlock():      
      - Checks if the entered file already exist else throws an error.
      - If the file exist it writes data where the pointer is pointing currently.

c)appendEmptyBlock():
      - Checks if the entered file already exist else throws an error.
      - If the file exist, then is appends a block of empty('/0' bytes) data to the end of the file.

d)ensureCapacity():
      - Check number of pages in the file.
      - If number of pages are less than specified pages, then increase the the number of pages to the specified number.
      - It uses appendEmptyBlock function to add the number of pages with '/0' bytes data.